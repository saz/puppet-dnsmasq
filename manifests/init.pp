# = Class: dnsmasq
#
# Installs and manages dnsmasq
#
# == Parameters
#
# [*upstream_servers*]
#   An array of upstream DNS servers to proxy.
#   Default: undef
#
# [*use_resolvconf*]
#   Boolean value to specify whether or not to use configuration
#   generated by resolvconf. Assumes that resolvconf will generate a
#   file in /var/run/dnsmasq/resolv.conf to be read by dnsmasq.
#   Default: no
#
# Note that both upstream_servers and use_resolvconf work by setting a
# `resolv-file` value using dnsmasq::conf. While they *can* be used
# together, they probably won't do what you expect: when you specify
# multiple resolv-files, dnsmasq will poll them all and use only the
# one with the latest mtime.
#
# Note that you don't have to use either option; you could instead
# specify a resolv-file yourself using a dnsmasq::conf resource; or
# leave dnsmasq to its default behaviour of reading /etc/resolv.conf.
class dnsmasq (
  $upstream_servers = undef,
  $use_resolvconf = 'no'
  ) {
  include dnsmasq::params

  anchor { 'dnsmasq::start': }

  class { 'dnsmasq::install':
    require => Anchor['dnsmasq::start'],
  }

  class { 'dnsmasq::config':
    upstream_servers => $upstream_servers,
    use_resolvconf   => $use_resolvconf,
    require          => Class['dnsmasq::install'],
  }

  class { 'dnsmasq::service':
    subscribe => Class[
      'dnsmasq::install',
      'dnsmasq::config'
    ],
  }

  class { 'dnsmasq::reload':
    require => Class['dnsmasq::service'],
  }

  anchor { 'dnsmasq::end':
    require => Class['dnsmasq::service'],
  }
}
